permissions:
  - '*'
sessions:
  session:
    redirect: false
    openAI: true

jobs:
  execute_job:
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Preparing Run Directory
        run: git clone --branch alvaro/dev-2 https://github.com/parallelworks/activate-rag-vllm-compose.git
      - name: Execute Process
        env:
          RUNMODE: ${{ inputs.runmode  }}
          BUILD: ${{ inputs.build  }}
          RUNTYPE: ${{ inputs.runtype  }}
          SYSTEM_PROMPT: ${{ inputs.systemprompt }}
          HF_TOKEN: ${{ inputs.hftoken  }}
          MODEL_NAME: ${{ inputs.hfmodel  }}
          DOCS_DIR: ${{ inputs.docsdir }}
        run: |
          cd activate-rag-vllm-compose

          echo "export RUNMODE=${RUNMODE}" > run.env
          echo "export BUILD=${BUILD}" >> run.env
          echo "export RUNTYPE=${RUNTYPE}" >> run.env
          echo "export SYSTEM_PROMPT=\"${SYSTEM_PROMPT}\"" >> run.env
          echo "export HF_TOKEN=${HF_TOKEN}" >> run.env
          echo "export MODEL_NAME=${MODEL_NAME}" >> run.env
          echo "export DOCS_DIR=${DOCS_DIR}" >> run.env

          /bin/bash run.sh
        
        cleanup: |
          set -x
          cd activate-rag-vllm-compose
          bash cancel.sh

  create_session:
    ssh:
      remoteHost: ${{ inputs.resource.ip }}
    steps:
      - name: Get Compute Hostname
        early-cancel: any-job-failed
        run: |
          while [ ! -d "activate-rag-vllm-compose" ]; do sleep 5; done; cd activate-rag-vllm-compose
          while true; do
            echo "Waiting for target hostname..."

            # Check if the service.port file exists and read its contents
            target_hostname=$(cat target.hostname  2>/dev/null)

            # Exit the loop if file was found and read
            if [ -n "${target_hostname}" ]; then
              echo "Target's hostname found: ${target_hostname}"
              break
            fi

            # Wait before the next check
            sleep 5
          done
          # FIXME: ONLY IF SLURM IS TRUE
          #job_id=$(cat job.id)
          #if [ -z "${job_id}" ]; then
          #  echo "Error: SLURM job ID is empty!" >&2
          #  exit 1
          #fi
          #target_hostname=$(squeue -j "${job_id}" --noheader --format="%N")
          echo "target_hostname=${target_hostname}"  | tee -a $OUTPUTS
      - name: Update Session
        uses: parallelworks/update-session
        with:
          remotePort: '8081'
          target: '${{ inputs.resource.id }}'
          name: '${{ sessions.session }}'
          remoteHost: '${{ needs.create_session.outputs.target_hostname }}'


'on':
  execute:
    inputs:
      resource:
        type: compute-clusters
        label: Compute Cluster
        autoselect: true
        include-workspace: false
        tooltip: Resource to run the service
      runmode:
        label: Execution Mode
        type: dropdown
        options:
          - value: docker
            label: Docker
          - value: singularity
            label: Singularity
      runtype:
        label: Run Type
        type: dropdown
        options:
          - value: all
            label: vLLM+RAG
          - value: vllm
            label: vLLM Only
      build:
        label: Build Containers
        type: boolean
        default: true
      hfmodel:
        label: HF Model
        default: meta-llama/Llama-3.1-8B-Instruct
        type: string
      hftoken:
        label: HF Token (gated models)
        optional: true
        default: ${{ org.HF_TOKEN }}
        type: password
      docsdir:
        label: RAG Directory
        hidden: ${{ inputs.runtype != 'all' }}
        optional: true
        default: ./docs
        type: string
      systemprompt:
        type: string
        label: System Prompt
        hidden: ${{ inputs.runtype != 'all' }}
        textarea: true
        optional: true
        default: You are a careful assistant. Use ONLY the provided context blocks to answer. Each block is numbered [1], [2], â€¦ and includes source metadata. When you use information from a block, you MUST cite it inline with [n]. At the end of your response, include a 'References' section with one reference per line formatted as [n] file_path (chunk index). Do not invent citations or sources. If the context does not contain the answer, say so briefly.
